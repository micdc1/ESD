/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "lcd.h"
#include<stdio.h>

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
	unsigned int echo_time;
	float distance;
	unsigned char buf[16];

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();

  lcd_init();
  lcd_clear();

  /* Initialize all configured peripherals */
  //Initialize the clocks for the timer6 and portD pins PD5 and PD6
  RCC->AHB1ENR |= (1 << 3); //GPIOD
  RCC->APB1ENR |= (1 << 4); //timer6

  //Initialize the TRIG and ECHO Pins
  GPIOD->MODER |= (1 << 10); //PD5 TRIG pin as output
  GPIOD->MODER &= ~(3 << 12); //PD6 ECHO pin as input

  TIM6->PSC =16; //16MHz /16 1 us counting
  TIM6->CR1 |= 1<<0; //enable timer

  lcd_displayString(1,1,"HC-SR04");
  HAL_Delay(100);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(((GPIOD->IDR) & (1 << 6)));//wait till echo pin HIGH
	  HAL_Delay(10);

	  GPIOD->ODR |= (1 << 5); //TRIG PIN HIGH

	  TIM6->CNT = 0 ;//start counting from 0
	  while((TIM6->CNT) < 12); //wait for delay of 20 us

	  GPIOD->ODR &= ~(1 << 5); //TRIG PIN LOW

	  while(((GPIOD->IDR) & (1 << 6)) == 0);//wait for echo pin to go HIGH

	  TIM6->CNT = 0 ;//start counting timer from 0
	  while(((GPIOD->IDR) & (1 << 6)));//wait till ECHO pin goes LOW
	  echo_time = TIM6->CNT; //get the count in us

	  if(echo_time >= 38000)
	   {
	    lcd_displayString(2,0,"no signal");
	   }
	  else
	   {
	    distance = (float)(echo_time*0.034)/2;
	    sprintf(buf,"%4.2f cm", distance);
	    lcd_displayString(2,0,buf);
	   }

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
