/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "lcd.h"
#include <stdio.h>

void adcInit()
{
 //enable ADC and clock
	RCC->APB2ENR |= (1 << 8); //ADC1 clock enable
	RCC->AHB1ENR |= (1 << 0); //GPIOA enable PA0 (ADC_IN0) for ADC

/*================ADC===================*/
//set ADC prescalar in ADC_CCR register
//ADC input clock is APB2 clock =16Mhz
//prescalar is 8 so clock is 2 Mhz
	ADC->CCR |= (3 << 16); //0x11 for div by 8

//set resolution to 12 bits in ADC_CR1 register
	ADC1->CR1 &= ~(1 << 24);


//set single conversion, EOC, and right data alignment in ADC_CR2 register
	ADC1->CR2 &= ~(1<<1); //single conversion CONT bit set to 0
	ADC1->CR2 &= ~(1<<11);//right alignment
	ADC1->CR2 &= ~(1 << 10); //EOC after each conversion

//set sampling time
	ADC1->SMPR2 = 0x00; //(0:0:0) bits for channel 0

//sequence of conversion
	ADC1->SQR1 &= 0x00; //single conversion
	ADC1->SQR3 &= 0x00; //channel 0 first conversion

//GPIO pins selection and analog function set
	GPIOA->MODER |= (3 << 0 ); //1:1 Analog mode
	//Enable the ADC
	ADC1->CR2 |= (1 << 0);

}

unsigned int readADC()
{
unsigned int retval;

	ADC1->SR = 0x00;

//start the conversion
	ADC1->CR2 |= (1 << 30);

	while(!((ADC1->SR) & 0x12));

return ADC1->DR;
}


/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/**
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
unsigned int retdat;
unsigned char buf[16]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
  adcInit();
  lcd_init();
  lcd_clear();
  lcd_displayString(1,1,"ADC1-PA0");
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  retdat = readADC();
	  sprintf(buf,"%04.0d mv",retdat);
	  lcd_displayString(2,1,buf);
	  HAL_Delay(500);
  }

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
